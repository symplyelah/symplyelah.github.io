---
title: "Bridging Data and Decision-Making: Data Visualization Techniques with R"
subtitle: "IEEE Nigeria Southeast Subsection"
author: Ifeoma Egbogah
format: 
  rladies-revealjs
incremental: false
embed-resources: true
editor_options: 
  chunk_output_type: console
---

# Drowning in Data, Starving for Insight {.inverse}

## Story: “Too Many Reports, Not Enough Direction”

Let me tell you about Amina.

She worked in customer retention at a mid-sized logistics company. Every Monday, her inbox was flooded with CSV files—customer complaints, delivery delays, package weights, region-wise returns… 

All of it collected diligently by the operations team.

But something was wrong.

Despite the data, customer churn kept rising. Leadership was frustrated. Amina felt helpless.

Until one day, she decided to stop sending spreadsheets and start telling stories with the data.

## 

```{r}
#| echo: false
library(tidyverse)
library(gameofthrones)
library(ggtext)
library(patchwork)
library(ggalt)

theme_set(theme_light())

logistics_data <- read_csv("data/logistics_data.csv") |> 
  janitor::clean_names() |> 
  mutate(date = dmy(glue::glue("1-{month}")),
         month2 = month(date, label = TRUE))  
  
customer_survey <- read_csv("data/customer_survey.csv")|> 
  janitor::clean_names() 

customer_survey <- customer_survey |> 
  mutate(likert_scale = case_when(customer_survey_score >= 1 & customer_survey_score <= 2 ~ "Very Dissatisfied",
                                  customer_survey_score >= 3 & customer_survey_score <= 4 ~ "Dissatisfied",
                                  customer_survey_score >= 5 & customer_survey_score <= 6 ~ "Neutral",
                                  
customer_survey_score >= 7 & customer_survey_score <= 8 ~ "Satisfied",
customer_survey_score >= 9 & customer_survey_score <= 10 ~ "Very Satisfied"))
  
```


```{r}
#| echo: false
#| 

data <- logistics_data |> 
  select(-date, -month2) |> 
  head(5) 

clean_names <- names(data) |> 
  (\(x) gsub("_", " ", x))() |>   # Replace underscores
  (\(x) tolower(x))() |>      # Convert to lowercase
  (\(x) tools::toTitleCase(x))() 

data |> 
  knitr::kable(col.names = clean_names, caption = "XYZ Logistics Customer Data") |> 
  kableExtra::kable_paper("hover", full_width = F)

```


```{r}
#| echo: false
#| eval: false

logistics_data <- logistics_data |> 
  mutate(date = dmy(glue::glue("1-{month}")),
         month2 = month(date, label = TRUE))  





logistics_data |> 
  mutate(region = str_replace(region, "-", " "),
         region = fct_reorder(region, customer_complaints),
         month2 = factor(month2, levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun")),
         month2 = fct_rev(month2) 
         ) |> 
  ggplot(aes(customer_complaints, region)) +
  geom_col(aes(colour = month2, fill = month2), position = position_dodge()) 
  


logistics_data |> 
  mutate(region = str_replace(region, "-", " "),
         region = fct_reorder(region, customer_complaints),
         month2 = fct_rev(month2)) |> 
  group_by(month2) |> 
  reframe(total = sum(returns),
            percent = returns/total,
            returns = returns,
            region = region) |>  
  ggplot(aes(percent, month2, fill = region)) +
  geom_col() +
  geom_col(colour ="white") +
  scale_x_continuous(labels = scales::percent_format(), position = "top") +
  scale_fill_got_d(option = "greyjoy", direction = -1) +
  theme_minimal() +
  labs(title = "",
       fill = "Region",
       x = "% of Returns",
       y = "Date")

```


```{r}
#| echo: false
ld <- logistics_data |> 
  mutate(region = str_replace(region, "-", " "),
         region = fct_reorder(region, customer_complaints)) |> 
  group_by(region) |> 
  summarise(total = sum(customer_complaints)) |>
  mutate(region = fct_reorder(region, total)) |> 
  ggplot(aes(total, region)) +
  geom_col(colour = "#4A3F37FF", fill = "#4A3F37FF") +
  geom_col(data = logistics_data |> 
             mutate(region = str_replace(region, "-", " "),
                    region = fct_reorder(region, customer_complaints)) |> 
             group_by(region) |> 
             summarise(total = sum(customer_complaints)) |> 
             filter(region == "North Central"), colour =  "#ECB939FF", fill = "#ECB939FF") +
  geom_text(aes(label = total), nudge_x = -40, colour = "white", fontface = "bold") +
  theme_minimal() +
  labs(y = "Region",
       x = "Total Compliants",
       title = "<b><span style = 'color:#ECB939FF;'>North Central:</span></b> A Hot Spot for Customer Compliants") +
  theme(axis.title.x = element_blank(),
        axis.text.x = element_blank(),
         axis.title.y = element_text(hjust = 0.9),
        plot.title = element_textbox_simple())

```



``` {r}
#| echo: false
ld1 <- logistics_data |> 
  mutate(region = str_replace(region, "-", " "),
         region = fct_reorder(region, customer_complaints)) |> 
  ggplot(aes(date, customer_complaints, group = region)) +
  geom_line(linewidth = 1, colour = "#4A3F37FF") +
  
  geom_line(data = logistics_data |> 
              mutate(region = str_replace(region, "-", " "),
         region = fct_reorder(region, customer_complaints)) |> 
              filter(region == "North Central"),    
             colour =  "#ECB939FF", linewidth = 1) +
  
  geom_text(data = logistics_data |> 
              filter(month2 == "Jun") |> 
               mutate(region = str_replace(region, "-", " "),
         region = fct_reorder(region, customer_complaints)),    
             aes(label = region), nudge_y = 1, nudge_x = 5) +
  
  geom_text(data = logistics_data |> 
              mutate(region = str_replace(region, "-", " "),
         region = fct_reorder(region, customer_complaints)) |> 
           filter(month2 == "Jun" & region == "North Central"),    
             aes(label = region), colour =  "#ECB939FF", nudge_y = 1, nudge_x = 5) +
  
  theme_minimal() +
  coord_fixed(clip = "off") +
  scale_y_continuous(limits = c(0, 160)) +
#  scale_x_date(position = "top") +
  labs(title = "Complaint Trend Watch: A Widening Gap Emerges After Q1",
       subtitle = "With customer complaints rising steadily from March to June, the <b><span style = 'color:#ECB939FF;'>North Central</span></b> region consistently recorded the highest number across all months — signaling persistent service challenges.",
       x = "Date",
       y = "# of Compliants") +
  theme(legend.position = "bottom",
        legend.text.position = "bottom",
        legend.title.position = "top",
        legend.justification.top = "left",
        legend.location = "plot",
        axis.title.y = element_text(hjust = 0.9),
        plot.subtitle = element_textbox_simple(margin = margin(18, 0, 0, 0)))

```


## XYZ Logistics

::: panel-tabset

### Customer Compliant
```{r}

#| echo: false


ld 

```


### Monthly Trend

```{r fig.width=10}

#| echo: false



ld1

```
:::

## XYZ Logistics

::: panel-tabset

### Returns
```{r}
#| echo: false

logistics_data |> 
  mutate(region = str_replace(region, "-", " "),
         region = fct_reorder(region, returns),
        month2 = factor(month2, levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun")),
         month2 = fct_rev(month2) 
         ) |> 
  ggplot(aes(returns, region)) +
  geom_col(aes(colour = month2, fill = month2), position = position_dodge()) +
  scale_fill_got_d(option = "greyjoy")+
  scale_colour_got_d(option = "greyjoy") +
  labs(title = "",
       y = "Region",
       x ="Returns") +
  theme(axis.title.y = element_text(hjust = 0.9))

```



### Customer Survey
```{r}
#| echo: false


customer_survey |> 
  mutate(likert_scale = factor(likert_scale, levels = c("Very Dissatisfied", "Dissatisfied", "Neutral", "Satisfied", "Very Satisfied"))) |> 
  group_by(region, likert_scale) |> 
  summarise(survey = n(), .groups = "drop") |> 
  group_by(region) |> 
  mutate(total = sum(survey),
         percent = survey/total) |> 
  ggplot() +
  geom_col(aes(percent, region, fill = fct_rev(likert_scale)), show.legend = FALSE) +
  geom_col(aes(percent, region, fill = fct_rev(likert_scale)), colour ="white", show.legend = FALSE) +
  scale_x_continuous(labels = scales::percent_format(), position = "top") +
  scale_fill_got_d(option = "greyjoy", direction = -1,  guide = guide_legend(reverse = T)) +
  labs(title = "Survey Results",
       x = "% of Total",
       y = "Region",
       subtitle = "<b><span style = 'color:#000000FF;'>Very Dissatisfied</span></b> | <b><span style = 'color:#372E29FF;'>Dissatisfied</span></b> | <b><span style = 'color:#726255FF;'>Neutral</span></b> | <b><span style = 'color:#F0C75EFF;'>Satisfied</span></b> | <b><span style = 'color:#ECB939FF;'>Very Satisfied</span></b>",
       fill = "") +
  theme(legend.position = "top",
        legend.text.position = "bottom",
        plot.subtitle = element_textbox_simple(),
        axis.title.y = element_text(hjust = 0.9))
  
  

```
:::

## Why Data Visualization Matters

-   Humans process visuals 60,000x faster than text

-   Visuals simplify complex data

-   Helps identify trends, outliers, and patterns

-   Supports data-driven decisions

# Data {.inverse}

## What is Data?

Data refers to **raw facts, figures,** and **statistics** that are collected through observation, measurement, research, or experimentation. On their own, data have no meaning until they are organized, analyzed, and interpreted.


### Key Characteristics of Data:

-   **Raw**: Unprocessed and unorganized

-   **Factual:** Based on real-world events, measurements, or records

## Data Types

### **Numerical** or **Quantitative Data**

Numerical (or Quantitative) data refers to data that represents measurable quantities—that is, values that can be counted or measured and expressed in numbers.

:::: columns
::: {.column width="100%"} 

<div style="text-align: center;">
  <img src="images/numerical.png" width="50%">
</div>

:::
::::

## Data Types Contd.

### **Numerical** or **Quantitative Data**


::: columns
::: {.column width="100%"}

<div style="text-align: center; font-size: 0.75em;">
+--------------------------------------------------------+----------------------------------------------------------+
| Continuous Data                                        | Discrete Data                                            |
+========================================================+==========================================================+
| Data that can take **any value within a range**.       | Data that can take only **specific, separate values**.   |
+--------------------------------------------------------+----------------------------------------------------------+
| **Usually measured** (can include decimals/fractions). | **Usually countable** (no decimals)                      |
+--------------------------------------------------------+----------------------------------------------------------+
| **Examples:**                                          | **Examples:**                                            |
|                                                        |                                                          |
| -    Height of a person (e.g., 1.75 meters)            | -    Number of employees in a company (e.g., 15, 23, 50) |
|                                                        |                                                          |
| -    Temperature (e.g., 36.6°C)                        | -    Number of students in a classroom                   |
|                                                        |                                                          |
| -    Sales revenue (e.g., ₦1,254,500.75)               | -    Number of cars sold in a day                        |
+--------------------------------------------------------+----------------------------------------------------------+
</div>
:::
:::

## Data Types Contd.

### Key Features of Numerical Data:
- Can be compared, ordered, added, or averaged

- Suitable for mathematical and statistical analysis

- Often visualized using bar charts, histograms, line graphs, or scatter plots



## Data Types Contd.

### **Categorical** or **Qualitative Data**

Categorical (or Qualitative) data refers to data that describes qualities or characteristics. Instead of numbers, it uses labels, names, or categories to represent information.


:::: columns
::: {.column width="100%"}

<div style="text-align: center;">
  <img src="images/categorical.png" width="50%">
</div>
:::
::::

## Data Types Contd.

### Key Feature of Categorical Data:
- Descriptive rather than numerical

- Used to classify or group data

- Cannot be meaningfully added, subtracted, or averaged

- Can be visualized using bar charts, pie charts, or tables



## Choosing the appropriate graph(s) for the data

So before any visualisation always consider:

- Discrete & continuous quantities
- Categeories

# Effective Visualization Techniques {.inverse}

## Simple Text

<div style="font-size: 0.75em;">
When you’re dealing with just one or two figures, using plain text can often be the most effective way to share them. 

To illustrate, the figure below appeared in an April 2014 report by the Pew Research Center focusing on stay-at-home mothers.
</div>

:::: columns
::: {.column width="100%"}

<div style="text-align: center;">
  <img src="images/pew.jpg" width="28%">
</div>

:::
::::


## Simple Text

<div style = "font-size: 0.75em;">
In this instance, a straightforward sentence does the job: in 2012, 20% of children had a traditional stay-at-home mother, down from 41% in 1970 or present it visually as below.
</div>

:::: columns
::: {.column width="100%"}

<div style="text-align: center;">
  <img src="images/stay.jpg" width="50%">
</div>

:::
::::

## Tables

* Engage our **verbal system** — we read them like text.
* Ideal for **scanning rows and columns** to compare specific values.
* Best for **mixed audiences** — each person can locate their row or column of interest.
* Handle **multiple units of measure** better than graphs (e.g., percentages, currency, counts).
* Preserve **exact figures** for precision-focused communication.

## Tables That Talk: Making Your Data Shine

<div style="font-size: 0.75em;">

* The **table design should be subtle**—don’t let it distract.
* Use **light borders** or **white space** to separate rows and columns.
* Avoid **heavy gridlines**, bold shading, or intense colours.
* Keep fonts clean and consistent; emphasize only what matters (e.g., bold totals or key values).
* The goal: **data takes center stage**, not the formatting.
</div>


:::: columns
::: {.column width="100%"}

<div style="text-align: center;">
  <img src="images/table.jpg" width="70%">
</div>

:::
::::


## Heatmaps


```{r}
#| echo: false


#phd_field <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2019/2019-02-19/phd_by_field.csv")


phd_field <- read_csv("data/phd_field.csv")

```

## PhDs Awarded by Field
The US gov collects data on all doctoral degree graduates every year. The data comes from the [NSF](https://ncses.nsf.gov/pubs/nsf19301/data). 

```{r}

phd_field |> 
  mutate(year = factor(year)) |> 
  group_by(major_field, year) |> 
  summarise(total = sum(n_phds, na.rm = TRUE)) |> 
  ggplot() +
  geom_tile(aes(year, major_field, fill = total)) +
  geom_text(aes(year, major_field, label = total), colour = "white") +
  scale_fill_got(option = "greyjoy") 


phd_field |> 
  mutate(year = factor(year)) |> 
  group_by(broad_field, year) |> 
  summarise(total = sum(n_phds, na.rm = TRUE)) |> 
  ggplot() +
  geom_tile(aes(year, broad_field, fill = total)) +
  geom_text(aes(year, broad_field, label = total), colour = "white") +
  scale_fill_got(option = "tully") 

```


::: panel-tabset

### Code 1


```{r}
#| echo: true
 
phd_total <-   phd_field |>
    group_by(broad_field) |> 
    summarise(phd_total = sum(n_phds, na.rm = TRUE)) |>
    mutate(broad_field = fct_reorder(broad_field, phd_total)) |> 
    ggplot(aes(phd_total, broad_field)) +
    geom_col() +
    scale_x_continuous(labels = scales::comma_format()) +
    labs(title = "PhD Awarded from 2008 to 2017 in the USA",
       x = "Number of PhD",
       y = "Field/Faulty",
       caption = "Data: NSF • Viz: Ifeoma Egbogah")

```

### PhD Awards


```{r}

phd_total

```


### Code 2

```{r}
#| echo: true

depart_total <- phd_field |> 
  group_by(broad_field, major_field) |> 
  summarise(phd_total = sum(n_phds, na.rm = TRUE), .groups = "drop") |>
  mutate(major_field = fct_reorder(major_field, phd_total)) |> 
  ggplot(aes(phd_total, major_field)) +
  geom_col() +
  scale_x_continuous(labels = scales::comma_format()) +
  labs(x = "Number of PhD",
       y = "Department",
       title = "Total Number of PhDs Awarded by Departments from 2008 to 2017",
        caption = "Data: NSF • Viz: Ifeoma Egbogah")


```

### Depart. Total

```{r}

depart_total

```

### Code 3
```{r}

phd_by_year <- phd_field |> 
 # filter(year %in% seq(2008, 2010, 1)) |> 
  group_by(major_field, year) |> 
  summarise(phd_total = sum(n_phds, na.rm = TRUE), .groups = "drop") |>
  mutate(major_field = fct_reorder(major_field, phd_total)) |> 
  ggplot(aes(phd_total, major_field)) +
  geom_lollipop(horizontal = TRUE, point.size = 2) +
  facet_wrap(~year, nrow = 2) +
  labs(x = "Award Total",
       y = "Department",
       title = "PhD Departmental Awards by Year",
       caption = "Data: NSF • Viz: Ifeoma Egbogah")
  


```


### By year

```{r}
phd_by_year
```


:::


## Visualising Distributions

We frequently encounter situations where we want to understand how a particular variable is distributed within a dataset. For example, in a sales dataset, we might be interested in examining the distribution of monthly revenue, the number of units sold per product, or the average transaction value. Understanding these distributions helps us identify patterns, spot outliers, and make data-driven decisions for improving business performance.

:::: columns
::: {.column width="100%"}

<div style="text-align: center;">
  <img src="images/single-distributions-1.png" width="100%">
</div>

:::
::::



| Chart Type   | Best For                     |
|--------------|------------------------------|
| Line Chart   | Trends over time             |
| Bar Chart    | Comparing categories         |
| Scatter Plot | Correlations, relationships  |
| Maps         | Geospatial data              |
| Dashboard    | Monitoring KPIs in real-time |

*Tip:* Choose simplicity and clarity over complexity.

# Real World Scenario: Walmart and Weather {.inverse}

:::: columns
::: {.column width="100%"}

<div style="text-align: center;">
  <img src="images/poptarts.png" width="50%">
</div>
:::
::::

## Walmart  

<div style="font-size: 0.75em;">

**Context:** We can’t control the weather, yet it affects everything we do. Most days are calm, but when Mother Nature shows her power, normal life is turned upside down.

In these moments, how can businesses keep operating and support communities?

In 2004 as Hurricane Frances roared through the Caribbean toward Florida, Walmart’s team asked themselves — how can we prepare smarter? Which products will people desperately need?

Walmart used historical sales data to anticipate what people would need most.

**Insight:** While obvious necessities like bottled water, flashlights, and batteries were expected, the data revealed a surprising pattern: strawberry Pop‑Tarts sales increased sevenfold, and beer became the top-selling item

**Action Taken:** Walmart stocked these items in bulk at regional distribution centers in the hurricane path.

</div>


## Walmart: Summary statistics of active inventory performance


::: panel-tabset

### Code 1
```{r}
#| echo: true
#| eval: false
item_stat <- wal_train |> 
  filter(units > 0 & units <2000) |>  
  mutate(store = glue::glue("Store {store_nbr}")) |> 
  group_by(store) |> 
  ggplot(aes(units, factor(item_nbr))) +
  geom_boxplot(outlier.shape = 16, outlier.size = 1.5, fill = "#f8f8f8", color = "#88398A") +
  coord_flip() +
  guides(x = guide_axis(angle = 90)) +
  labs(title = "Distribution of Items Sold",
       y = "Item Number",
       x = "Units Sold",
       caption = "Data: Kaggle • Viz: Ifeoma Egbogah")

```

### Plot:Item
```{r}
#item_stat
```

### Code 2
```{r}
#| echo: true
#| eval: false
store <- wal_train |> 
  filter(units > 0) |>  
  filter(store_nbr %in% seq(1, 5, 1)) |> 
  mutate(store = glue::glue("Store {store_nbr}")) |> 
  group_by(store) |> 
  ggplot(aes(units, factor(item_nbr))) +
  geom_boxplot(outlier.shape = 16, outlier.size = 1.5, fill = "#f8f8f8", color = "#88398A") +
  facet_wrap(~store,  scales = "free", nrow = 1) +
  labs(title = "Distribution of Units Sold by Item across Stores 1 to 5",
       y = "Item Number",
       x = "Units Sold",
       caption = "Data: Kaggle • Viz: Ifeoma Egbogah") +
  theme_minimal() + 
  theme(plot.title = element_text(colour = "#562457", face = "bold", hjust = 0.5),
        strip.text = element_text(face = "bold"), 
        axis.text.y = element_text(size = 6))
```

### Plot:Store 1-5
```{r}
#store
```

### Code 3
```{r}
#| echo: true
#| eval: false
#| 
store_by_year <- wal_train |> 
  mutate(year = year(date)) |>
  filter(units > 0) |> 
  filter(store_nbr %in% seq(1, 5, 1)) |> 
  group_by(store_nbr, year) |> 
  ggplot(aes(units, factor(item_nbr))) +
 geom_boxplot(outlier.shape = 16, outlier.size = 1.5, fill = "#f8f8f8", color = "#88398A") +
  facet_grid(rows = vars(year), cols = vars(store_nbr), scales = "free_y") +
  labs(title = "Distribution of Units Sold by Item across Stores 1 to 5",
       y = "Item Number",
       x = "Units Sold",
       caption = "Data: Kaggle • Viz: Ifeoma Egbogah") +
  #theme_minimal() + 
  theme(plot.title = element_text(colour = "#562457", face = "bold", hjust = 0.5),
        strip.text = element_text(face = "bold"), 
        axis.text.y = element_text(size = 6))
  

```

### Plot: By_year
```{r}
#store_by_year
```

:::



# Real World Scenario: Nigerian Brewries {.inverse}

:::: columns
::: {.column width="100%"}

<div style="text-align: center;">
  <img src="images/nig_brew_logo.png" width="60%", height="70%">
</div>
:::
::::



## COVID-19

COVID-19 dashboards helped governments track and respond to infection spikes and vaccinations.

:::: columns
::: {.column width="50%"}
![](images/maryland_covid.png)
:::
::::

# Bridging the Gap Between Data and Decisions {.inverse}

## Mind the Gap

**Problem:** Data is abundant, but insights are scarce.

**Solution:** Visualization bridges the gap between raw data and strategic action.

**Outcome:** Simplifies storytelling and supports real-time decisions.

# What is R and Why Use It? {.inverse}

## R

-   Free and open-source statistical language

-   Used in academia and business

-   Integrates data wrangling, analysis, and visualization

*Key Visualization Packages:*

`ggplot2`

`plotly`

`shiny`

## Data Visualization

:::: columns
::: {.column width="100%"}
<div style="text-align: center;">
  <img src="images/program.png" width="70%">
</div>
:::
::::



# Case Study {.inverse}

## Academic Use Case – Education Access

**Dataset:** World Bank (Literacy vs Internet Access)

**Visualization:** Scatter plot showing socio-economic development.

**Insight:** Nigeria lags behind Kenya and Egypt in internet penetration despite comparable literacy rates.
