---
title: "Bridging Data and Decision-Making: Data Visualization Techniques with R"
subtitle: "IEEE Nigeria Southeast Subsection"
author: Ifeoma Egbogah
format: 
  rladies-revealjs
incremental: false
embed-resources: true
editor_options: 
  chunk_output_type: console
---

# Drowning in Data, Starving for Insight {.inverse}

## Story: “Too Many Reports, Not Enough Direction”

<div style = "font-size:0.75em;">

Let me tell you about Amina.

She worked in customer retention at a mid-sized logistics company. Every Monday, her inbox was flooded with CSV files—customer complaints, delivery delays, package weights, region-wise returns… 

All of it collected diligently by the operations team.

But something was wrong.

Despite the data, customer churn kept rising. Leadership was frustrated. Amina felt helpless.

Until one day, she decided to stop sending spreadsheets and start telling stories with the data.
</div>
## 

```{r}
#| echo: false
#| 
library(tidyverse)
library(gameofthrones)
library(ggtext)
library(patchwork)
library(ggalt)
library(gt)
library(ggrepel)

theme_set(theme_minimal())

logistics_data <- read_csv("data/logistics_data.csv") |> 
  janitor::clean_names() |> 
  mutate(date = dmy(glue::glue("1-{month}")),
         month2 = month(date, label = TRUE))  
  
customer_survey <- read_csv("data/customer_survey.csv")|> 
  janitor::clean_names() 

customer_survey <- customer_survey |> 
  mutate(likert_scale = case_when(customer_survey_score >= 1 & customer_survey_score <= 2 ~ "Very Dissatisfied",
                                  customer_survey_score >= 3 & customer_survey_score <= 4 ~ "Dissatisfied",
                                  customer_survey_score >= 5 & customer_survey_score <= 6 ~ "Neutral",
                                  
customer_survey_score >= 7 & customer_survey_score <= 8 ~ "Satisfied",
customer_survey_score >= 9 & customer_survey_score <= 10 ~ "Very Satisfied"))

emissions <- read_csv("data/emissions.csv")  

phd_field <- read_csv("data/phd_field.csv")

medal <- read_csv("data/summer_olympic_medals.csv") |> 
  janitor::clean_names()


```


```{r}
#| echo: false
#| 

data <- logistics_data |> 
  select(-date, -month2) |> 
  head(5) 

clean_names <- names(data) |> 
  (\(x) gsub("_", " ", x))() |>   # Replace underscores
  (\(x) tolower(x))() |>      # Convert to lowercase
  (\(x) tools::toTitleCase(x))() 

data |> 
  knitr::kable(col.names = clean_names, caption = "XYZ Logistics Customer Data") |> 
  kableExtra::kable_paper("hover", full_width = F)

```


```{r}
#| echo: false
#| eval: false

logistics_data <- logistics_data |> 
  mutate(date = dmy(glue::glue("1-{month}")),
         month2 = month(date, label = TRUE))  





logistics_data |> 
  mutate(region = str_replace(region, "-", " "),
         region = fct_reorder(region, customer_complaints),
         month2 = factor(month2, levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun")),
         month2 = fct_rev(month2) 
         ) |> 
  ggplot(aes(customer_complaints, region)) +
  geom_col(aes(colour = month2, fill = month2), position = position_dodge()) 
  


logistics_data |> 
  mutate(region = str_replace(region, "-", " "),
         region = fct_reorder(region, customer_complaints),
         month2 = fct_rev(month2)) |> 
  group_by(month2) |> 
  reframe(total = sum(returns),
            percent = returns/total,
            returns = returns,
            region = region) |>  
  ggplot(aes(percent, month2, fill = region)) +
  geom_col() +
  geom_col(colour ="white") +
  scale_x_continuous(labels = scales::percent_format(), position = "top") +
  scale_fill_got_d(option = "greyjoy", direction = -1) +
  theme_minimal() +
  labs(title = "",
       fill = "Region",
       x = "% of Returns",
       y = "Date")

```


```{r}
#| echo: false
ld <- logistics_data |> 
  mutate(region = str_replace(region, "-", " "),
         region = fct_reorder(region, customer_complaints)) |> 
  group_by(region) |> 
  summarise(total = sum(customer_complaints)) |>
  mutate(region = fct_reorder(region, total)) |> 
  ggplot(aes(total, region)) +
  geom_col(colour = "#4A3F37FF", fill = "#4A3F37FF") +
  geom_col(data = logistics_data |> 
             mutate(region = str_replace(region, "-", " "),
                    region = fct_reorder(region, customer_complaints)) |> 
             group_by(region) |> 
             summarise(total = sum(customer_complaints)) |> 
             filter(region == "North Central"), colour =  "#ECB939FF", fill = "#ECB939FF") +
  geom_text(aes(label = total), nudge_x = -40, colour = "white", fontface = "bold") +
  theme_minimal() +
  labs(y = "Region",
       x = "Total Compliants",
       title = "<b><span style = 'color:#ECB939FF;'>North Central:</span></b> A Hot Spot for Customer Compliants") +
  theme(axis.title.x = element_blank(),
        axis.text.x = element_blank(),
         axis.title.y = element_text(hjust = 0.9),
        plot.title = element_textbox_simple())

```



``` {r}
#| echo: false
ld1 <- logistics_data |> 
  mutate(region = str_replace(region, "-", " "),
         region = fct_reorder(region, customer_complaints)) |> 
  ggplot(aes(date, customer_complaints, group = region)) +
  geom_line(linewidth = 1, colour = "#4A3F37FF") +
  
  geom_line(data = logistics_data |> 
              mutate(region = str_replace(region, "-", " "),
         region = fct_reorder(region, customer_complaints)) |> 
              filter(region == "North Central"),    
             colour =  "#ECB939FF", linewidth = 1) +
  
  geom_text(data = logistics_data |> 
              filter(month2 == "Jun") |> 
               mutate(region = str_replace(region, "-", " "),
         region = fct_reorder(region, customer_complaints)),    
             aes(label = region), nudge_y = 1, nudge_x = 5) +
  
  geom_text(data = logistics_data |> 
              mutate(region = str_replace(region, "-", " "),
         region = fct_reorder(region, customer_complaints)) |> 
           filter(month2 == "Jun" & region == "North Central"),    
             aes(label = region), colour =  "#ECB939FF", nudge_y = 1, nudge_x = 5) +
  
  theme_minimal() +
  coord_fixed(clip = "off") +
  scale_y_continuous(limits = c(0, 160)) +
#  scale_x_date(position = "top") +
  labs(title = "Complaint Trend Watch: A Widening Gap Emerges After Q1",
       subtitle = "With customer complaints rising steadily from March to June, the <b><span style = 'color:#ECB939FF;'>North Central</span></b> region consistently recorded the highest number across all months — signaling persistent service challenges.",
       x = "Date",
       y = "# of Compliants") +
  theme(legend.position = "bottom",
        legend.text.position = "bottom",
        legend.title.position = "top",
        legend.justification.top = "left",
        legend.location = "plot",
        axis.title.y = element_text(hjust = 0.9),
        plot.subtitle = element_textbox_simple(margin = margin(18, 0, 0, 0)))

```


## XYZ Logistics

::: panel-tabset

### Customer Compliant
```{r}

#| echo: false


ld 

```


### Monthly Trend

```{r fig.width=10}

#| echo: false



ld1

```
:::

## XYZ Logistics

::: panel-tabset

### Returns
```{r}
#| echo: false

logistics_data |> 
  mutate(region = str_replace(region, "-", " "),
         region = fct_reorder(region, returns),
        month2 = factor(month2, levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun")),
         month2 = fct_rev(month2) 
         ) |> 
  ggplot(aes(returns, region)) +
  geom_col(aes(colour = month2, fill = month2), position = position_dodge()) +
  scale_fill_got_d(option = "greyjoy")+
  scale_colour_got_d(option = "greyjoy") +
  labs(title = "",
       y = "Region",
       x ="Returns",
       fill = "Months") +
  theme(axis.title.y = element_text(hjust = 0.9))

```



### Customer Survey
```{r}
#| echo: false


customer_survey |> 
  mutate(likert_scale = factor(likert_scale, levels = c("Very Dissatisfied", "Dissatisfied", "Neutral", "Satisfied", "Very Satisfied"))) |> 
  group_by(region, likert_scale) |> 
  summarise(survey = n(), .groups = "drop") |> 
  group_by(region) |> 
  mutate(total = sum(survey),
         percent = survey/total) |> 
  ggplot() +
  geom_col(aes(percent, region, fill = fct_rev(likert_scale)), show.legend = FALSE) +
  geom_col(aes(percent, region, fill = fct_rev(likert_scale)), colour ="white", show.legend = FALSE) +
  scale_x_continuous(labels = scales::percent_format(), position = "top") +
  scale_fill_got_d(option = "greyjoy", direction = -1,  guide = guide_legend(reverse = T)) +
  labs(title = "Survey Results",
       x = "% of Total",
       y = "Region",
       subtitle = "<b><span style = 'color:#000000FF;'>Very Dissatisfied</span></b> | <b><span style = 'color:#372E29FF;'>Dissatisfied</span></b> | <b><span style = 'color:#726255FF;'>Neutral</span></b> | <b><span style = 'color:#F0C75EFF;'>Satisfied</span></b> | <b><span style = 'color:#ECB939FF;'>Very Satisfied</span></b>",
       fill = "") +
  theme(legend.position = "top",
        legend.text.position = "bottom",
        plot.subtitle = element_textbox_simple(),
        axis.title.y = element_text(hjust = 0.9))
  
  

```
:::

# Why Data Visualization Matters {.inverse}

## No Longer Drowning

<div style = "font-size:0.75em;">
-   Humans process visuals 60,000x faster than text

-   Visuals simplify complex data

-   Helps identify trends, outliers, and patterns

-   Supports data-driven decisions
</div>

# Data {.inverse}

## What is Data?

<div style = "font-size:0.75em;">
Data refers to **raw facts, figures,** and **statistics** that are collected through observation, measurement, research, or experimentation. On their own, data have no meaning until they are organized, analyzed, and interpreted.
</div>

### Key Characteristics of Data:

<div style = "font-size:0.75em;">
-   **Raw**: Unprocessed and unorganized

-   **Factual:** Based on real-world events, measurements, or records
</div>

## Data Types

### **Numerical** or **Quantitative Data**

<div style = "font-size:0.75em;">
Numerical (or Quantitative) data refers to data that represents measurable quantities—that is, values that can be counted or measured and expressed in numbers.
</div>

:::: columns
::: {.column width="100%"} 

<div style="text-align: center;">
  <img src="images/numerical.png" width="50%">
</div>

:::
::::

## Data Types Contd.

### **Numerical** or **Quantitative Data**


::: columns
::: {.column width="100%"}

<div style="text-align: center; font-size: 0.75em;">
+--------------------------------------------------------+----------------------------------------------------------+
| Continuous Data                                        | Discrete Data                                            |
+========================================================+==========================================================+
| Data that can take **any value within a range**.       | Data that can take only **specific, separate values**.   |
+--------------------------------------------------------+----------------------------------------------------------+
| **Usually measured** (can include decimals/fractions). | **Usually countable** (no decimals)                      |
+--------------------------------------------------------+----------------------------------------------------------+
| **Examples:**                                          | **Examples:**                                            |
|                                                        |                                                          |
| -    Height of a person (e.g., 1.75 meters)            | -    Number of employees in a company (e.g., 15, 23, 50) |
|                                                        |                                                          |
| -    Temperature (e.g., 36.6°C)                        | -    Number of students in a classroom                   |
|                                                        |                                                          |
| -    Sales revenue (e.g., ₦1,254,500.75)               | -    Number of cars sold in a day                        |
+--------------------------------------------------------+----------------------------------------------------------+
</div>
:::
:::

## Data Types Contd.

### Key Features of Numerical Data:

<div style = "font-size:0.75em;">
- Can be compared, ordered, added, or averaged

- Suitable for mathematical and statistical analysis

- Often visualized using bar charts, histograms, line graphs, or scatter plots
</div>


## Data Types Contd.

### **Categorical** or **Qualitative Data**

<div style = "font-size:0.75em;">
Categorical (or Qualitative) data refers to data that describes qualities or characteristics. Instead of numbers, it uses labels, names, or categories to represent information.
</div>

:::: columns
::: {.column width="100%"}

<div style="text-align: center;">
  <img src="images/categorical.png" width="50%">
</div>
:::
::::

## Data Types Contd.

### Key Feature of Categorical Data:

<div style = "font-size:0.75em;">
- Descriptive rather than numerical

- Used to classify or group data

- Cannot be meaningfully added, subtracted, or averaged

- Can be visualized using bar charts, pie charts, or tables


</div>

## Choosing the appropriate graph(s) for the data

<div style = "font-size:0.75em;">
So before any visualisation always consider:

- Discrete & continuous quantities
- Categories

</div>

# Effective Visualization Techniques {.inverse}

## Simple Text

<div style="font-size: 0.75em;">
When you’re dealing with just one or two figures, using plain text can often be the most effective way to share them. 

To illustrate, the figure below appeared in an April 2014 report by the Pew Research Center focusing on stay-at-home mothers.
</div>

:::: columns
::: {.column width="100%"}

<div style="text-align: center;">
  <img src="images/pew.jpg" width="28%">
</div>

:::
::::


## Simple Text

<div style = "font-size:0.75em;">
In this instance, a straightforward sentence does the job: in 2012, 20% of children had a traditional stay-at-home mother, down from 41% in 1970 or present it visually as below.
</div>

:::: columns
::: {.column width="100%"}

<div style="text-align: center;">
  <img src="images/stay.jpg" width="40%">
</div>

:::
::::

## Tables

<div style = "font-size: 0.75em;">
* Engage our **verbal system** — we read them like text.
* Ideal for **scanning rows and columns** to compare specific values.
* Best for **mixed audiences** — each person can locate their row or column of interest.
* Handle **multiple units of measure** better than graphs (e.g., percentages, currency, counts).
* Preserve **exact figures** for precision-focused communication.
</div>

```{r}


logistics_data |> 
  select(region, month2, average_delivery_delay_days) |> 
  pivot_wider(names_from = month2, values_from = average_delivery_delay_days) |> 
  gt(rowname_col = "region") |> 
  tab_stubhead(label = "") |> 
  tab_header(title = md("**Regional Breakdown of Average Delivery Delays**")) 
  
```


## Tables That Talk: Making Your Data Shine

<div style="font-size: 0.75em;">

* The **table design should be subtle**—don’t let it distract.
* Use **light borders** or **white space** to separate rows and columns.
* Avoid **heavy gridlines**, bold shading, or intense colours.
* Keep fonts clean and consistent; emphasize only what matters (e.g., bold totals or key values).
* The goal: **data takes center stage**, not the formatting.
</div>


:::: columns
::: {.column width="100%"}

<div style="text-align: center;">
  <img src="images/table.jpg" width="90%">
</div>

:::
::::


## Heatmaps

<div style = "font-size: 0.75em;">
A heatmap transforms a table of numbers into a visual experience by using color to represent the size or intensity of values. Instead of relying solely on digits, it fills each cell with varying shades—making patterns, trends, and outliers instantly easier to spot.
</div>

```{r}
#| echo: false

logistics_data |> 
  ggplot() +
  geom_tile(aes(month2, region, fill = average_delivery_delay_days), show.legend = FALSE) +
  geom_text(aes(month2, region, label = average_delivery_delay_days), colour = "white", fontface = "bold", size = 7) +
  scale_fill_got(option = "greyjoy", direction = -1) +
  theme_minimal() +
  labs(x = "Month",
       y = " ",
       fill = "Delay Days",
       title = "Regional Breakdown of Average Delivery Delays",
       subtitle = "<b><span style = 'color:#ECB939FF;'>LOW</span></b>-<b><span style = 'color:#000000FF;'>HIGH</span></b>") +
  theme(plot.subtitle = element_textbox_simple(),
        plot.title = element_text(size = 18),
        axis.title = element_text(size = 16),
        axis.text = element_text(size = 13))



```

## Colouring Your Way to Clarity

<div style = "font-size:0.75em;">
* Reduces cognitive load by turning numbers into visual cues.

* Color intensity helps the eye quickly identify patterns and outliers.

* In a heatmap, darker (more saturated) colors indicate higher values.

* Makes it faster and easier to spot key data points—like the lowest (5) and highest (24) values.

* Unlike plain tables, visual cues guide attention to areas of interest without extra mental effort.
</div>

## Graphs

<div style = "font-size: 0.75em;">
Unlike tables, graphs tap into our visual perception, allowing us to grasp patterns and insights much faster. A thoughtfully crafted graph often communicates key messages more quickly than even the best-designed table.

There are countless types of graphs. They are 
typically grouped into four main categories: 

* points 

* lines 

* bars 

* area charts. 

These core graph styles cover a wide range of everyday data visualization needs.
</div>

## Points: Small Dots, Big Insights

<div style = "font-size: 0.75em;">
Point plots use individual dots to represent data values. Simple but powerful, they are excellent for highlighting individual observations or comparing values across categories with precision.

### Why Use Point Plots?
* Show exact values clearly: Each dot represents a data point, making it easy to compare and spot differences.

* Reduce clutter: Point plots can present data more cleanly than bar charts, especially when working with many categories or limited space. 

* Highlight outliers: Unusual or extreme values stand out visually.
</div>

## Scatterplot

<div style = "font-size: 0.75em;">
A scatterplot is a simple yet powerful chart type used to show the relationship between two numerical variables. 

### Why Scatterplots Matter in Storytelling:

* Reveal relationships: Scatterplots help uncover patterns, trends, and correlations that might otherwise remain hidden in raw data.

* Spot outliers: Unusual points stand out visually, making it easy to identify exceptions or anomalies worth further investigation.

* Show clusters: When data points form groups, it may hint at sub-categories or behaviors within the data.

* Support evidence: In data-driven storytelling, scatterplots visually reinforce claims like “as X increases, Y decreases.”
</div>

## Carbon Majors

<div style = "font-size: 0.75em;">
To better understand scatterplot we will explore the historical emissions data from [Carbon Majors](https://carbonmajors.org/).

> Carbon Majors is a database of historical production data from 122 of the world’s largest oil, gas, coal, and cement producers. This data is used to quantify the direct operational emissions and emissions from the combustion of marketed products that can be attributed to these entities. These entities include:

> 75 Investor-owned Companies, 36 State-owned Companies, 11 Nation States, 82 Oil Producing Entities, 81 Gas Entities, 49 Coal Entities, 6 Cement Entities

> The data spans back to 1854 and contains over 1.42 trillion tonnes of CO2 emissions covering 72% of global fossil fuel and cement emissions since the start of the Industrial Revolution in 1751.

</div>

```{r}

emissions <- read_csv('data/emissions.csv')

```

## Carbon Majors

:::: panel-tabset

### Oil & Gas

```{r}

emissions |> 
 filter(commodity %in% c("Oil & NGL", "Natural Gas")) |> 
  mutate(decade = (year %/% 10) * 10) |> 
  ggplot(aes(production_value, total_emissions_MtCO2e)) +
  geom_jitter(position = position_jitter(width = 150, height = 100), alpha = 0.5, size = 3) +
  facet_wrap(~commodity, scales = "free_x") +
  theme_minimal() +
  labs(x = "Production Value",
       y = "CO<sub>2</sub> Emission",
       title = "Emissions Rise in Lockstep with Production—A Tale of Two Fossil Fuels") +
  theme(axis.title.y = element_markdown(hjust = 0.9))
  
```


### By Decade

```{r}

emissions |> 
 filter(commodity %in% c("Oil & NGL", "Natural Gas")) |> 
  mutate(decade = (year %/% 10) * 10) |> 
  ggplot(aes(production_value, total_emissions_MtCO2e, colour = decade)) +
  geom_jitter(position = position_jitter(width = 150, height = 100), alpha = 0.5, size = 3) +
  scale_color_got(option = "greyjoy", breaks = seq(1850, 2020, 20)) +
  facet_wrap(~commodity, scales = "free_x") +
  labs(x = "Production Value",
       y = "CO<sub>2</sub> Emission",
       colour = "Year",
       title = "Emissions Rise in Lockstep with Production—A Tale of Two Fossil Fuels",
       subtitle = "Mid-20th century: Breakthroughs in exploration tech led to massive oil field discoveries (Ghawar, Burgan, Cantarell). This drove a steady increase in global oil and natural gas production. Since the 2000s, fewer 'elephant' oil fields have been found. But production didn’t fall immediately—why? We’re no longer discovering more oil—we’re just getting better at extracting what’s left.") +
  theme(axis.title.y = element_markdown(hjust = 0.9),
        plot.subtitle = element_textbox_simple(margin = margin(2, 0, 8, 0, unit = "mm")))
  
```

### State vs Private

```{r}

```

### NNPC

```{r}

emissions |> 
 filter(commodity %in% c("Oil & NGL", "Natural Gas"),
        parent_entity == "Nigerian National Petroleum Corp.") |> 
  mutate(decade = (year %/% 10) * 10) |> 
  ggplot(aes(production_value, total_emissions_MtCO2e, colour = decade)) +
  geom_jitter(position = position_jitter(width = 5, height = 5), alpha = 0.5, size = 3) +
  scale_color_got(option = "greyjoy", breaks = seq(1960, 2020, 10)) +
  facet_wrap(~commodity, scales = "free_x") +
  labs(x = "Production Value",
       y = "CO<sub>2</sub> Emission",
       colour = "Year",
       title = "Boom Years and Carbon Cost",
       subtitle = "CO<sub>2</sub> emissions have climbed alongside fossil fuel production in Nigeria—especially in recent decades—with natural gas showing the steepest rise.") +
    theme(axis.title.y = element_markdown(hjust = 0.9),
          plot.subtitle = element_textbox_simple())


```


::::



## Lines: Connecting the Dots of Change

<div style = "font-size:0.75em;">
A line graph is one of the most effective tools for visualizing how something changes over time. It connects individual data points with a line, allowing us to quickly see trends, shifts, and patterns.

### What Line Graphs Show:
* Trends – Are values increasing, decreasing, or remaining stable?

* Fluctuations – Are there spikes or dips over time?

* Comparisons – How do different categories or groups evolve across time?

</div>

## Ireland's Oympic Success Story

:::: columns
::: {.column width="100%"}

<div style="text-align: center;">
  <img src="images/ireland.png" width="65%">
</div>

:::
::::

## Ireland's Olympic Success Story

:::: columns
::: {.column width="100%"}

```{r}

medal2 <- medal |> 
  group_by(year, country_name) |> 
  rowwise() |> 
  mutate(medals = sum(c_across(gold:bronze))) 

ireland <- medal2 |> 
  group_by(year) |> 
  arrange(desc(gold), desc(silver), desc(bronze)) |> 
  mutate(rank = min_rank(-gold * 1e6 - silver * 1e3 - bronze)) |>
  filter(country_name == "Ireland" & year >= 2000) |> 
  unite("host", host_city, year, sep = "\n", remove = FALSE) 

ire_2024 <- tibble(host = c("Athens\n2004", "Paris\n2024"),
                   year = c(2004, 2024),
                   host_country = c("Greece", "France"),
                   host_city = c("Athens", "Paris"),
                   country_name = c("Ireland","Ireland"),
                   country_code = c("IRL", "IRL"),
                   gold = c(0, 4),
                   silver = c(0, 0),
                   bronze = c(0, 3),
                   medals = c(0, 7),
                   rank = c(NA, 19))

ireland <- bind_rows(ireland, ire_2024)


add_suffix <- function(x) {
  if(is.na(x)) {
    return(NA)
  } else if(x %% 10 == 1){
    return(paste0(x, "st"))
  } else if(x %% 10 == 2){
    return(paste0(x, "nd"))
  } else if(x %% 10 == 3){
    return(paste0(x, "rd"))
  } else if(x %% 100 >= 11 && x %% 100 <= 13){
    return(paste0(x, "th"))
  } else {
    return(paste0(x, "th"))
  }
}

x_axis <- ireland |> 
  arrange(year) |> 
  select(host)
  

ireland |> 
  ggplot(aes(year, rank)) +
  geom_line(linewidth = 1.2) +
  geom_point(size = 2) +
  geom_text(aes(label = sapply(rank, add_suffix)), nudge_y = 5) +
  geom_text(data = ireland |> 
              filter(year == 2004),
            aes(2004, 60, label = "No\nMedal")) +
  scale_y_reverse(limits = c(70,0)) +
  scale_x_continuous(breaks = seq(2000, 2025, 4), labels = x_axis$host) +
  labs(x = "Year",
       y = "Rank",
       title = "Ireland's Olympic Success Story") +
  theme(axis.title.y = element_text(hjust = 0.9, size = 13),
        axis.title.x = element_text(hjust = 0.5, size = 13),
        axis.text = element_text(size = 13),
        plot.title = element_text(size = 16))
  

```


:::
::::

## Line Graph

<div style = "font-size: 0.75em;">
Line graph can show a single series of data, two series of data, or multiple series. 

To illustrate we will use data collected by the US gov on all doctoral degree graduates every year. The data comes from the [NSF](https://ncses.nsf.gov/pubs/nsf19301/data). 
</div>

## PhD Awards

:::: panel-tabset

### Single Series

```{r}

phd_field |> 
  filter(broad_field == "Life sciences") |> 
  group_by(year) |> 
  summarise(total = sum(n_phds, na.rm = TRUE)) |> 
  ggplot() +
  geom_line(aes(year, total), size = 1.2, colour = "#ECB939FF") +
  geom_point(aes(year, total), size = 2, colour = "#372E29FF") +
  scale_x_continuous(breaks = seq(2008, 2017, 1)) +
  scale_y_continuous(limits = c(0, 22500)) +
  labs(x = "Year",
       y = "Total PhD Awards",
       title = "Total PhD Awards in Life Sciences (2008–2017)")
    

```

### Double Series

```{r}


phd_field |> 
  filter(broad_field %in% c("Life sciences", "Engineering")) |> 
  group_by(year, broad_field) |> 
  summarise(total = sum(n_phds, na.rm = TRUE)) |> 
  ggplot() +
  geom_line(aes(year, total, colour = broad_field), size = 1.2, show.legend = FALSE) +
  geom_point(aes(year, total, colour = broad_field), size = 2, show.legend = FALSE) +
  geom_text(data = phd_field |> 
              filter(year == 2017,broad_field %in% c("Life sciences", "Engineering")) |> 
              group_by(year, broad_field) |> 
              summarise(total = sum(n_phds, na.rm = TRUE)), 
            aes(year, total, label = broad_field, colour = broad_field), nudge_y = 450, nudge_x = 0.2, show.legend = FALSE) +
  scale_x_continuous(breaks = seq(2008, 2017, 1)) +
  scale_y_continuous(limits = c(0, 23000), labels = scales::comma_format()) +
  scale_colour_got_d(option = "greyjoy") +
  labs(x = "Year",
       y = "PhD Awards",
       colour = "Faculty",
       title = "PhD Awards in <span style = 'color:#ECB939FF;'>Life Sciences</span> and  <span style = 'color:#372E29FF;'>Engineering</span> (2008–2017)") +
  theme(axis.title.y = element_text(hjust = 0.9),
        plot.title = element_textbox())

```

### Multiple Series

```{r}

phd_field |> 
  filter(broad_field == "Life sciences") |> 
  group_by(major_field, year) |> 
  summarise(total = sum(n_phds, na.rm = TRUE)) |> 
  ggplot(aes(year, total, group = major_field)) +
  geom_line(linewidth = 1.2, colour = "#372E29FF") +
  geom_point(size = 2, colour = "#372E29FF") +
  
  geom_text_repel(data = phd_field |> 
              filter(year == 2017, broad_field == "Life sciences", major_field != "Health sciences") |> 
              group_by(year, major_field) |> 
              summarise(total = sum(n_phds, na.rm = TRUE)), 
            aes(2017, total, label = str_wrap(major_field, width = 20)), size = 3, hjust = 0,  xlim = c(2017.5, NA), direction = "y", max.overlaps = 20,  segment.size = .3, segment.alpha = .33,     segment.curvature = .05, segment.ncp = 3, segment.angle = 10, box.padding = .2,) +
  
  geom_line(data = phd_field |> 
              filter(broad_field == "Life sciences") |> 
              group_by(major_field, year) |> 
              summarise(total = sum(n_phds, na.rm = TRUE)) |>
              filter(major_field == "Health sciences"),
            linewidth = 1.2, colour = "#ECB939FF") +
  
  geom_point(data = phd_field |> 
              filter(broad_field == "Life sciences") |> 
              group_by(major_field, year) |> 
              summarise(total = sum(n_phds, na.rm = TRUE)) |>
              filter(major_field == "Health sciences"),
              colour = "#ECB939FF", size = 2) +
  
  geom_text_repel(data = phd_field |> 
              filter(year == 2017, broad_field == "Life sciences") |> 
              group_by(major_field, year) |> 
              summarise(total = sum(n_phds, na.rm = TRUE)) |>
              filter(major_field == "Health sciences"),
            aes(label = major_field),
              colour = "#ECB939FF", size = 3, hjust = -0.55,  xlim = c(2017.5, NA), direction = "y", segment.size = .5, segment.alpha = .33,  segment.curvature = .10, segment.ncp = 3, segment.angle = 10, box.padding = .2,  nudge_y = 655) +
  
  
  scale_x_continuous(breaks = seq(2008, 2017, 1), expand = expansion(mult = c(0, 0.2))) +
  scale_y_continuous(limits = c(0, 10000), labels = scales::comma_format()) +
  coord_cartesian(clip = "off") +
  theme_minimal() +
  labs(x = "Year",
       y = "# of PhD Awards",
       colour = "Faculty",
       title = "Tracking PhD Awards Across Life Sciences (2008–2017)",
       subtitle = "Between 2008 and 2017, PhD awards in the life sciences showed an overall upward trend, though growth varied across disciplines. Biological and biomedical sciences consistently produced the highest number of PhDs, maintaining their lead throughout the decade. However, <span style = 'color:#ECB939FF;'>health sciences</span> experienced the most significant growth, with numbers rising sharply from 2012 and nearly surpassing chemistry and geosciences by 2017. Meanwhile, fields like physics, chemistry, and geosciences saw steady but moderate increases in PhD awards. Agricultural sciences remained the least awarded field, growing slowly but consistently. Overall, the data suggests a gradual shift toward health-focused research within the life sciences, alongside enduring strength in traditional core fields.") +
  theme(axis.title.y = element_text(hjust = 0.9),
        plot.subtitle = element_textbox_simple(size = 8))





```

::::

## Caution: Small differences appear more dramatic

::: panel-tabset

## Misleading
```{r}

phd_field |> 
  filter(broad_field == "Life sciences") |> 
  group_by(year) |> 
  summarise(total = sum(n_phds, na.rm = TRUE)) |> 
  ggplot() +
  geom_point(aes(year, total), size = 2, colour = "#372E29FF") +
  geom_line(aes(year, total), size = 1.2, colour = "#372E29FF") +
  scale_x_continuous(breaks = seq(2008, 2017, 1)) +
  labs(x = "Year",
       y = "Total PhD Awards",
       title = "Total PhD Awards in Life Sciences (2008–2017)")

```


## Corrected
```{r}

phd_field |> 
  filter(broad_field == "Life sciences") |> 
  group_by(year) |> 
  summarise(total = sum(n_phds, na.rm = TRUE)) |> 
  ggplot() +
  geom_line(aes(year, total), size = 1.2, colour = "#372E29FF") +
  geom_point(aes(year, total), size = 2, colour = "#372E29FF") +
  
  scale_x_continuous(breaks = seq(2008, 2017, 1)) +
  scale_y_continuous(limits = c(0, 22500), labels = scales::comma_format()) +
  labs(x = "Year",
       y = "Total PhD Awards",
       title = "PhD Awards in Life Sciences (2008–2017)")



```

:::

## Slopegraph

<div style = "font-size:0.75em;">
Slopegraph is a hybrid of a line graph and a time series as it only compares two values, connected by a line, with a continuous date axis.

Slopegraphs are powerful visual tools that convey a wealth of information at a glance. Not only do the points show actual values, but the connecting lines instantly reveal upward or downward trends—visually communicating changes over time. Without needing to define concepts like “rate of change,” the slope naturally tells the story, making the data intuitive and easy to interpret.
</div>

## PhD Awards: Decline, Stability, and Surge

:::: panel-tabset

### Decade of transition


```{r  fig.height=14, fig.width=10}

top_10 <- phd_field |> 
  filter(major_field == "Biological and biomedical sciences", year == 2017) |> 
  arrange(desc(n_phds)) |> 
  slice_max(n_phds, n = 10) |> 
  pull(field)



phd_gap <- phd_field |>
  filter(major_field == "Biological and biomedical sciences") |> 
  filter(year == 2017 | year == min(year)) |> 
  pivot_wider(id_cols = c(field),
              names_from = year,
              values_from = n_phds,
              names_prefix = "gap_") |>
  drop_na() |> 
   pivot_longer(cols = -c(field, gap_2017),
               names_to = "year_ref",
               values_to = "gap_ref",
               names_prefix = "gap_") |> 
   mutate( year_ref = as.numeric(year_ref),
           change = gap_2017 - gap_ref,
           trend = case_when(
           change < -20 ~ "Smaller Award Gap",
           change > 20 ~ "Larger Award Gap",
           TRUE ~ "Stable Award Gap"),
          trend = factor(trend, levels = c("Larger Award Gap", "Stable Award Gap", "Smaller Award Gap")),
          field_lab = glue::glue("{field} ({change})")) |> 
   filter(field %in% top_10)

phd_gap |> 
  ggplot(aes(year_ref, gap_ref, colour = trend)) +
  geom_point(size = 2) +
  geom_point(aes(2017, gap_2017, colour = trend, size = change), shape = 1, stroke = .6, show.legend = FALSE) +
  geom_segment(
    data = filter(phd_gap, trend == "Smaller Award Gap"),
    aes(xend = 2016.8, yend = gap_2017), size = .8,
    arrow = arrow(type = "closed", length = unit(1.3, "mm"))
  ) +
  
  geom_segment(
     data = filter(phd_gap, trend %in% c("Larger Award Gap", "Stable Award Gap")),
    aes(xend = 2016.8, yend = gap_2017), size = .8, 
    arrow = arrow(type = "closed", length = unit(1.3, "mm"))
  ) +
  
    geom_text_repel(data = phd_gap |> 
                      filter(!field %in% c("Biological and biomedical sciences, general", "Genetics, genomics, human and animal")),
                    aes(x = 2017.02, 
                        y = gap_2017, 
                        colour = trend, 
                        label = field_lab), 
                    size = 3, hjust = -0.35, xlim = c(2017.2, NA), 
                    direction = "y", max.overlaps = 20,
                    segment.size = .3, segment.alpha = .33,
                    segment.curvature = .05, segment.ncp = 3, 
                    segment.angle = 10, box.padding = .2, 
                    show.legend = FALSE) +
  
  geom_text_repel(data = phd_gap |> 
                      filter(field == "Genetics, genomics, human and animal"),
                    aes(x = 2017, 
                        y = gap_2017, 
                        colour = trend, 
                        label = field_lab), 
                    size = 3, hjust = -0.15, xlim = c(2017, NA),                     direction = "y", max.overlaps = 20,
                    segment.size = .3, segment.alpha = .33,
                    segment.curvature = .05, segment.ncp = 3, 
                    segment.angle = 10, box.padding = .2, 
                  nudge_y = -50, show.legend = FALSE) +
  
   geom_text_repel(data = phd_gap |> 
                      filter(field == "Biological and biomedical sciences, general"),
                    aes(x = 2017.02, 
                        y = gap_2017, 
                        colour = trend, 
                        label = field_lab), 
                    size = 3, hjust = -0.15, xlim = c(2017.2, NA),                     direction = "y", max.overlaps = 20,
                    segment.size = .3, segment.alpha = .33,
                    segment.curvature = .05, segment.ncp = 3, 
                    segment.angle = 10, box.padding = .2, 
                  nudge_y = -20, show.legend = FALSE) +
  
   annotate(geom = "segment",
            x = 2007.5, 
            xend = 2017.5,
            y = 1:1000*250, 
            yend = 1:1000*250,
            color = "grey80", 
            linetype = "42", 
            size = .3
  ) +
  
  annotate(geom = "segment",
           x = 2007.5, 
           xend = 2017.5, 
           y = 0, 
           yend = 0,
           color = "grey80", 
           size = .6
  ) +
  
  annotate(geom = "segment",
           x = 2007.5, 
           xend = 2017.5, 
           y = 1000, 
           yend = 1000,
           color = "grey80", 
           size = .6
  ) +
  
   annotate(geom = "text",
            x = 2007.5, 
            y = 1:1000*250,
            label = 1:1000*250,
            hjust = 0, 
            vjust = 1.2, 
            color = "grey30", 
            size = 4) +
  
   coord_cartesian(clip = "off") +
   scale_x_continuous(expand = expansion(mult = c(0, 0.5)), breaks = c(2008, 2017), position = "top")+
   scale_y_continuous(limits = c(0, 1000)) +
   scale_color_got_d(option = "tully") +
   scale_size_area(max_size = 7.5) +
  labs(title = "A Decade of Transition: How the Top Biological Science Fields Are Shifting",
       subtitle = "Even within the most popular subfields of biological sciences, the landscape is shifting. Fields that once dominated in PhD production are now declining, while others like neuroscience are gaining momentum. This may reflect changes in research funding, perceived career prospects, technological advancement, or the relevance of these fields to societal challenges.",
       y= " ",
       x = " ",
       colour = " ") +
   theme(legend.position.inside = c(0.73, 0.15),
         legend.position = "inside",
         plot.subtitle = element_textbox_simple(),
         plot.title = element_text(size = 16),
          panel.grid = element_blank(),
         axis.ticks.length.x = unit(.4, "lines"),
         axis.ticks.x.top = element_line(color = "grey80", size = .6),
         axis.text.y = element_blank(),
         axis.text.x.top = element_text(color = "grey30"))


 
      
  
  # caption = "Data: NSF • Viz: Ifeoma Egbogah")

```


###

```{r}

phd_field |>
  filter(major_field == "Biological and biomedical sciences") |> 
  filter(year == 2017 | year <= 2016) %>%
  mutate(period = if_else(year == 2017, "today", "reference"),
         gap = n_phds) |> 
  group_by(field, period) |> 
  summarise(gap = mean(gap, na.rm = TRUE), .groups = "drop") |> 
  pivot_wider(id_cols = c(field),
              names_from = period,
              values_from = gap) |>  
  mutate(field_today = fct_reorder(field, today),
         field_ref = fct_reorder(field, reference),
         change = today - reference,
         trend = case_when(
           change < -20 ~ "Larger Award Gap",
           change > 20 ~ "Smaller Award gap",
           TRUE ~ "Stable Award gap"),
          trend = factor(trend, levels = c("Larger Award gap", "Stable Award gap", "Smaller Award gap"))) 


```

:::


## Bars


## Type

<div style = "font-size:0.75em;">
| Chart Type   | Best For                     |
|--------------|------------------------------|
| Line Chart   | Trends over time             |
| Bar Chart    | Comparing categories         |
| Scatter Plot | Correlations, relationships  |
| Maps         | Geospatial data              |
| Dashboard    | Monitoring KPIs in real-time |

*Tip:* Choose simplicity and clarity over complexity.

</div>


# Bridging the Gap Between Data and Decisions {.inverse}

## Mind the Gap

**Problem:** Data is abundant, but insights are scarce.

**Solution:** Visualization bridges the gap between raw data and strategic action.

**Outcome:** Simplifies storytelling and supports real-time decisions.

# What is R and Why Use It? {.inverse}

## R

-   Free and open-source statistical language

-   Used in academia and business

-   Integrates data wrangling, analysis, and visualization

*Key Visualization Packages:*

`ggplot2`

`plotly`

`shiny`

## Data Visualization

:::: columns
::: {.column width="100%"}
<div style="text-align: center;">
  <img src="images/program.png" width="70%">
</div>
:::
::::


